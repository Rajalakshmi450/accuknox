Below will solve the infinite loop issue 

def __init__(self, name='root', children=None,parent=None):
        self.name = name
        self.parent=parent
        self.children = []
        if children is not None:
            for child in children:
                self.add_child(child)
                               
OR


def __init__(self, value, parent = None, children = []):

The empty list [] gets created only once, when the function is defined, a
nd all invocations share the same list! 
So  append to one list of children modifies all of them - because they all are one and the same list object. 

The correct solution is to replace children=[] with something like:

def __init__(self, value, parent=None, children=None):
    if children is None:
        children = []
        
When you use + to append to the list, you work around the above bug because you re-create the list every time, thus unsharing the children objects.
That will guarantee the creation of a new list for children, and then append and + should have the same result.
